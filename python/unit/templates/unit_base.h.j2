#pragma once
#include <memory>
#include <vector>

#include <basis/unit.h>
#include <basis/arguments.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
{% for include in cpp_includes %}
#include <{{include}}>
{% endfor %}
#pragma clang diagnostic pop

{% for handler_name in handlers %}
#include <unit/{{unit_name}}/handlers/{{handler_name}}.h>
{% endfor %}

namespace unit::{{unit_name}} {
    using namespace std;
    struct Args : public basis::arguments::UnitArguments<Args> {
    private:
        friend class basis::arguments::UnitArguments<Args>;
        {# avoid double declaration of empty args list #}
        {% if args %}
        Args() = default;
        {% endif %}
    public:
        Args(
        {%- set comma = joiner(", ") %}
        {% for argument_name, argument in args.items() %}
            {{ comma() }}
            const 
            {% if argument.get('optional', False) and not argument.type.startswith('vector') %}
                std::optional<{{argument.type}}>
            {% else %}
                {{argument.type}}
            {% endif %}&
            {{argument_name}}
        {% endfor %}
        ) 
        {% if args %} :
            {%- set comma = joiner(", ") %}
            {% for argument_name, argument in args.items() %}
                {{ comma() }} {{argument_name}}({{argument_name}})
            {% endfor %}
        {% endif %}
         {

        }


        {% for argument_name, argument in args.items() %}
            {% if argument.get('optional', False) and not argument.type.startswith('vector') %}
                std::optional<{{argument.type}}> {{argument_name}};
            {% else %}
                {{argument.type}} {{argument_name}} = {};
            {% endif %}
        {% endfor %}

        static std::array<std::unique_ptr<basis::arguments::ArgumentMetadataBase>, {{args|length}}> argument_metadatas;

        void HandleParsedArgs(const argparse::ArgumentParser& parser) {
        {% for argument_name, argument in args.items() %}
            {% if argument.get('optional', False) and not argument.type.startswith('vector') %}
                if (parser.present("--{{argument_name}}")) {
                    {{argument_name}} = parser.get<{{argument.type}}>("--{{argument_name}}");
                    args_map["{{argument_name}}"] = fmt::format("{}", *{{argument_name}});
                }
            {% else %}
                {{argument_name}} = parser.get<{{argument.type}}>("--{{argument_name}}");
                args_map["{{argument_name}}"] = fmt::format("{}", {{argument_name}});
            {% endif %}
        {% endfor %}
        }
    };
}

namespace unit::{{unit_name}} {

    // TODO: this won't work with multi threaded units, obviously
    class Base : public basis::SingleThreadedUnit {
        void SetupSerializationHelpers();

        void CreatePublishersSubscribers(const basis::UnitInitializeOptions& options) {
            {% for handler_name in handlers %}
            {{handler_name}}_pubsub.SetupPubSub(options, transport_manager.get(), overall_queue, &thread_pool, templated_topic_to_runtime_topic);
            handlers["{{handler_name}}"] = &{{handler_name}}_pubsub;
            {% endfor %}
        }

    public:
        using Args = unit::{{unit_name}}::Args;

        Base(const Args& args, std::optional<std::string_view> name_override = {}) 
            : cached_args(args), basis::SingleThreadedUnit(name_override.value_or("{{unit_name}}")) {
            // It's assumed that we've already checked the template arguments pre-construction, anyhow, so ignore the error case and crash otherwise
            // (we're in a constructor, all we can do is throw)
            // It's unfortunate that we end up parsing the topics twice, but it shouldn't be that slow
            templated_topic_to_runtime_topic = *basis::unit::RenderTemplatedTopics(args, all_templated_topics);
        }

{% for handler_name in handlers %}
        virtual {{handler_name}}::Output {{handler_name}}(const {{handler_name}}::Input& input) = 0;
{% endfor %}

        virtual void Initialize(const basis::UnitInitializeOptions& options) final override {
            CreatePublishersSubscribers(options);
            SetupSerializationHelpers();
        }
    
    private:
        {% for handler_name in handlers %}
        {{handler_name}}::PubSub {{handler_name}}_pubsub = {
            AUTO_LOGGER.get(),
            [this](auto input){
                return {{handler_name}}(input); 
            }
        };
        {% endfor %}

        const unit::{{unit_name}}::Args cached_args;
        // All inputs and outputs, to use to populate template conversion cache
    public:
        static std::vector<std::string> all_templated_topics;
    };
    
}