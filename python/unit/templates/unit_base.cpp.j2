#include <unit/{{unit_name}}/unit_base.h>

namespace unit::{{unit_name}} {

{# PubSub impls, to avoid weird linker errors and to speed up compilation time #}
{% for handler_name, handler in handlers.items() %}
namespace {{handler_name}} {
    void PubSub::SetupPubSub(
        basis::core::transport::TransportManager* transport_manager,
        basis::core::transport::OutputQueue* output_queue,
        basis::core::threading::ThreadPool* thread_pool) {
            // todo init sync
    {% for topic_name, input in handler.inputs.items() %}
        {{input.cpp_topic_name}}_subscriber = transport_manager->Subscribe<{{input.cpp_message_type}}>("{{topic_name}}",
        [this](auto msg){
            synchronizer->OnMessage<{{loop.index0}}>(msg);
{% if 'rate' not in handler.sync %}
            synchronizer->ConsumeIfReady();
{% endif %}
        },
        thread_pool, output_queue);
    {% endfor %}
    {% for topic_name, output in handler.outputs.items() %}
        {{output.cpp_topic_name}}_publisher = transport_manager->Advertise<{{output.cpp_message_type}}>("{{topic_name}}");
    {% endfor %}
    {% if 'rate' in handler.sync %}
    rate_subsciber = std::make_unique<basis::core::transport::RateSubscriber>(
        basis::core::Duration::FromSecondsNanoseconds(0, int64_t(std::nano::den * {{handler.sync.rate}})),
        [this, output_queue](basis::core::MonotonicTime time) {
        output_queue->Emplace([this, time]() {
            OnRateSubscriber(time);
        });
        }

        );
    {% endif %}
    }
}
{% endfor %}
}