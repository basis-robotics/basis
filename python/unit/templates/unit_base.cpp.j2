#include <unit/{{unit_name}}/unit_base.h>

namespace unit::{{unit_name}} {
    
std::array<std::unique_ptr<basis::arguments::ArgumentMetadataBase>, {{args|length}}> Args::argument_metadatas = {
{% for argument_name, argument in args.items() %}
    std::make_unique<
        basis::arguments::TypedArgumentMetadata<{{argument.type}}>
    >
    (
        "{{argument_name}}",
        "{{argument.get('help')}}",
        {{argument.get('optional', False) | lower}}
        {% if 'default' in argument %}
            , {{argument.default|tojson}}
        {% endif %}),
{% endfor %}
    
};

std::vector<std::string> Base::all_templated_topics = {
{% for handler in handlers.values() %}
{% for topic in handler.inputs.keys() %}
    "{{topic}}",
{% endfor %}
{% for topic in handler.outputs.keys() %}
    "{{topic}}",
{% endfor %}
{% endfor %}
};

void Base::SetupSerializationHelpers() {
{% set all_deserialize_types = {} -%}
{% for handler in handlers.values() %}
{% for input in handler.inputs.values() %}
{% if input.type not in all_deserialize_types and input.serializer != "raw" %}
{% do all_deserialize_types.update({input.type: True}) %}
    deserialization_helpers["{{input.type}}"] = basis::SerializationHandler<{{input.cpp_message_type}}>::type::template DeserializeFromSpan<{{input.cpp_message_type}}>;
{% endif %}
{% endfor %}
{% endfor %}
}


{% for handler_name, handler in handlers.items() %}

namespace {{handler_name}} {


{# PubSub impls, to avoid weird linker errors and to speed up compilation time #}

    void PubSub::SetupPubSub(
        const basis::UnitInitializeOptions& options,
        basis::core::transport::TransportManager* transport_manager,
        std::shared_ptr<basis::core::containers::SubscriberOverallQueue> overall_queue,
        basis::core::threading::ThreadPool* thread_pool, const std::unordered_map<std::string, std::string>& templated_topic_to_runtime_topic) {
    {% if 'rate' in handler.sync %}
        rate_duration = basis::core::Duration::FromSecondsNanoseconds(0, int64_t(std::nano::den * {{handler.sync.rate}}));
    {% endif %}

    std::array<basis::core::containers::SubscriberQueueSharedPtr, {{handler.inputs|length}}> queues {
    {%- for input_it in handler.inputs.values() %}
      std::make_shared<basis::core::containers::SubscriberQueue>(overall_queue, {{input_it['qos']['depth']}}),
    {%- endfor %}
    };
    SetupInputs(options, transport_manager, queues, thread_pool, templated_topic_to_runtime_topic);

    outputs = {
        {% for output_name in handler.outputs.keys() %}
            templated_topic_to_runtime_topic.at("{{output_name}}"),
        {% endfor %}
    };

    {% for topic_name, output in handler.outputs.items() %}
    {{output.cpp_topic_name}}_publisher = 
    {% if output.serializer == "raw" %}
        transport_manager->Advertise<{{output.cpp_message_type}}, basis::core::serialization::RawSerializer>
    {% else %}
        transport_manager->Advertise<{{output.cpp_message_type}},
            basis::SerializationHandler<{{output.cpp_message_type}}>::type
        {% if 'inproc_type' in output %}
            , {{output.inproc_type}}
        {% endif %}
            >
    {% endif %}
        (templated_topic_to_runtime_topic.at("{{topic_name}}"));
        {{output.cpp_topic_name}}_publisher->SetMaxQueueSize({{output['qos']['depth']}});
    {% endfor %}
    {% if 'rate' in handler.sync %}
    if(options.create_subscribers) {
        rate_subscriber = std::make_unique<basis::core::transport::RateSubscriber>(
            *rate_duration,
            [this, overall_queue](basis::core::MonotonicTime time) {
                // Don't allow more than 1 rate subscriber callback in the queue, to avoid overload
                // We may eventually want this configurable
                bool has_queued_message;
                {
                    std::lock_guard lock(rate_subscriber_queued_message_mutex);
                    has_queued_message = rate_subscriber_queued_message != nullptr;
                }

                if(!has_queued_message) {
                    // No need to relock - we are about to queue the only thing that could change the pointer
                    rate_subscriber_queued_message = std::make_shared<std::function<void()>>([this, time]() {
                        {
                            std::lock_guard lock(rate_subscriber_queued_message_mutex);
                            rate_subscriber_queued_message = nullptr;
                        }
                        OnRateSubscriber(time);
                    });
                    overall_queue->AddCallback(rate_subscriber_queued_message);
                }
            });
    }
    {% endif %}
    }
}
{% endfor %}
}