#pragma once

#include <basis/core/transport/subscriber.h>
#include <basis/core/transport/publisher.h>
#include <basis/synchronizers/all.h>
#include <basis/synchronizers/field.h>

{% for serializer in serializers %}
#include <basis/plugins/serialization/{{serializer}}.h>
{% endfor %}

namespace unit::{{unit_name}}::{{handler_name}} {
    struct Input {
        // TODO: we need to have both "now" and "scheduled time", some applications will care about one or the other
        basis::core::MonotonicTime time;
{% for input_name, input in inputs.items() %}
        // {{input_name}}
        {{input.cpp_type}} {{input.cpp_topic_name}};
{% endfor %}
        // TODO: this will need metadata around topics to handle deterministic mode
    };

    struct Output {
{% for output_name, output in outputs.items() %}
        // {{output_name}}
        {{output.cpp_type}} {{output.cpp_topic_name}};
{% endfor %}
        // TODO: diagnostics, error state, etc
        // TODO: should we take as unique_ptr instead?

        basis::HandlerPubSub::TopicMap ToTopicMap() {
            return {
            {% for output_name, output in outputs.items() %}
                {"{{output_name}}", {{output.cpp_topic_name}}},
            {% endfor %}
            };
        }
    };

{%if sync.type == 'all' %}
    // Simple, synchronize all messages on presence
    using Synchronizer = basis::synchronizers::All<
{%- set comma = joiner(", ") %}
{%- for input_name, input in inputs.items() %}
            {{- comma() }}
            {{input.cpp_type}}
{%- endfor %}
    >;

{% elif sync.type == 'equal' or 'approximate' in sync.type %}
    // Simple, synchronize all messages on presence
    {% if sync.type == 'equal' %}
    using Synchronizer = basis::synchronizers::FieldSyncEqual<
    {% else %}
    using Synchronizer = basis::synchronizers::FieldSyncApproximatelyEqual<
        {{sync.type.approximate}},
    {% endif %}
{%- set comma = joiner(", ") %}
{%- for input_name, input in inputs.items() %}
            {{- comma() }}
            basis::synchronizers::Field<{{input.cpp_type}},
            {%if 'sync_field' in input %}
                {%if input.sync_field.startswith('::') %}
                    &{{input.cpp_message_type}}{{input.sync_field}}
                {% else %}
                    [](const {{input.cpp_message_type}}* msg) {
                        return msg->{{input.sync_field}};
                    }
                {% endif %}
            {% else %}
                nullptr
            {%endif%}
            >
{%- endfor %}
    >;
{% endif %}

    constexpr size_t INPUT_SIZE = {{ inputs | length }};

    struct PubSub : basis::HandlerPubSubWithOptions<PubSub, {{ ('rate' in sync) | string | lower}}, INPUT_SIZE> {
        using Synchronizer = Synchronizer;
        using HandlerCallback = std::function<Output(const Input&)>;

        PubSub(spdlog::logger * const logger, std::function<Output(const Input&)> handler_callback, std::function<void(Output&)> publish_callback = nullptr)
            : AUTO_LOGGER(logger), handler_callback(handler_callback), publish_callback(publish_callback)
        {

            synchronizer = std::make_unique<Synchronizer>(std::tuple{ 
{%- set comma = joiner(", ") %}
{%- for input_name, input in inputs.items() %}
            {{- comma() }}
            basis::synchronizers::MessageMetadata<{{input.cpp_type}}>{
                .is_optional = {{input.get('optional', False)|lower}},
                .is_cached = {{input.get('cached', False)|lower}},
            }
{%- endfor %}
            }
            );
        }

        Output RunHandlerAndPublish(const basis::core::MonotonicTime& now, const std::tuple<
{%- set comma = joiner(", ") %}
{%- for input_name, input in inputs.items() %}
            {{- comma() }}
            {{input.cpp_type}}
{%- endfor %}
        >& messages) {

            auto f = [&]<typename... Ts>(Ts&&... ts){
                return handler_callback({now, std::forward<Ts>(ts)...});
            };
            Output output = std::apply(f, messages);
            
{% for output_name, output in outputs.items() %}
        {% if not output.optional %}
            if (output.{{output.cpp_topic_name}} == nullptr) {
                BASIS_LOG_ERROR("{{unit_name}}::{{handler_name}} didn't output {{output_name}}");
            }
        {% endif %}
{% endfor %}
            if(publish_callback) {
                publish_callback(output);
            }
            else {
                PublishOutput(output);
            }
            return output;
        }

        bool SynchronizerIsReady() {
            return synchronizer->IsReady();
        }

        ~PubSub() {
            // Remove subscribers first
            {% for input_name, input in inputs.items() %}
            {{input.cpp_topic_name}}_subscriber = nullptr;
            {% endfor %}
            {% if 'rate' in sync %}
            // Ensure that we stop the rate subscriber thread before we destruct the synchronizer
            rate_subsciber = nullptr;
            {% endif %}
            synchronizer = nullptr;
        }

        void SetupPubSub(
            const basis::UnitInitializeOptions& options,
            basis::core::transport::TransportManager* transport_manager,
            std::shared_ptr<basis::core::transport::OutputQueue> output_queue,
            basis::core::threading::ThreadPool* thread_pool);

        void PublishOutput(const Output& output) {
{% for output_name, output in outputs.items() %}
        if(output.{{output.cpp_topic_name}}) {
            {{output.cpp_topic_name}}_publisher->Publish(output.{{output.cpp_topic_name}});
        }
{%- endfor %}
        }



{% if 'rate' in sync %}
private:
    std::unique_ptr<basis::core::transport::RateSubscriber> rate_subsciber;    
    std::atomic<bool> is_rate_subscriber_queued = false;

public:
{% endif %}
{% for input_name, input in inputs.items() %}
        // {{input_name}}
        std::shared_ptr<basis::core::transport::Subscriber<{{input.cpp_message_type}}>> {{input.cpp_topic_name}}_subscriber;
{% endfor %}
{% for output_name, output in outputs.items() %}
        // {{output_name}}
        std::shared_ptr<basis::core::transport::Publisher<{{output.cpp_message_type}}>> {{output.cpp_topic_name}}_publisher;
{%- endfor %}

        std::unique_ptr<Synchronizer> synchronizer;
        std::function<void(Output&)> publish_callback;
        HandlerCallback handler_callback;

        static constexpr std::array<const char*, INPUT_SIZE> subscription_topics = {
{%- for input_name in inputs.keys() %}
            "{{input_name}}",
{%- endfor %}
        };
        static constexpr std::array<const char*, INPUT_SIZE> subscription_serializers = {
{%- for input in inputs.values() %}
            "{{ input.serializer }}",
{%- endfor %}
        };

        static constexpr std::tuple<
        {%- set comma = joiner(", ") %}
        {% for input_name, input in inputs.items() %}
            {{ comma() }}
            decltype(&PubSub::{{input.cpp_topic_name}}_subscriber)
        {% endfor %}
        > subscribers = {
        {% for input_name, input in inputs.items() %}
            &PubSub::{{input.cpp_topic_name}}_subscriber,
        {% endfor %} 
        };
    private:
        spdlog::logger * const AUTO_LOGGER;
    };

}