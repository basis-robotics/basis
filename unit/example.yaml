# the default name of the unit
name: example

# The ways handlers are allowed to interact with eachother 
threading_model:
  # single - by default all handlers run mutually exclusive from eachother
  # multi - by default all handlers run in parallel
  single
handlers:
  # This handler looks for two image messages coming in with the same timestamp and outputs one stereo image
  StereoMatch:
    sync:
      # require exact field matching
      type: equal
      # buffer at most 2 messages on each channel before dropping
      buffer_size: 2
    inputs:
      /camera_left:
        # TODO: we may end up allowing the `rosmsg:` field to be dropped, either by doing a search in the schemas
        # or by allowing a default serializer to be specified
        type: rosmsg:sensor_msgs::Image
        # TODO: We may end up providing default sync_fields for some serializer or message types to reduce boilerplate
        sync_field: header.stamp
      /camera_right:
        type: rosmsg:sensor_msgs::Image
        sync_field: header.stamp
    ouputs:
      /camera_stereo:
        type: rosmsg:example_msgs::StereoImage

  # This handler looks for a pointcloud and a position, syncing when the timestamps are "close enough"
  # It will also accumulate event data while waiting for a synchronization
  OnLidarSync:
    sync:
      type:
        # Triggers when message timestamps are within 5ms of eachother
        approximate: 5ms
      buffer_size: 5
    inputs:
      /lidar_data:
        type: rosmsg:sensor_msgs::PointCloud2
        # The time field of the protobuf message is a double, so we apply a conversion here
        sync_field: header.stamp.toSec()
      /vector_data:
        type: protobuf:StampedVectorData
        # the double colon specifies that this is a raw field on the type, rather than code to call
        sync_field: ::time
      /event_data:
        type: protobuf:Event
        # This topic won't be required 
        optional: True
        # When we do have it, accumulate up to 10 messages
        # accumulate: True for infinite accumulation
        accumulate: 10
    outputs:
      /lidar_sync_event:
        type: protobuf:LidarSyncEvent

  # This handler produces topics at a rate of 1hz, but only when /topic_a has been provided
  # If /topic_b has come, we also use that as well
  OneHertzWithTopic:
    type:
      # 10hz / 0.1s / 100ms
      rate: 10hz
    inputs:
      /topic_a:
        type: protobuf:A
      /topic_b:
        type: protobuf:B
        optional: True

    outputs:
      /topic_c:
        type: protobuf:C
        # Normally all outputs are required, or else an assertion or other error diagnostic is raised
        # This field signals that we might not have this output
        optional: True

  # This will trigger when all inputs of a type are received
  HandleAll:
    type:
      all
    inputs:
      /topic_c:
        type: protobuf:C
      /topic_d:
        type: protobuf:D      
    # outputs aren't strictly necessary - this unit may be sending data to an external system


# TODO: transport buffer policies
# TODO: mutex groups
# TODO: worker thread configuration?


